// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum CategoryType {
  INCOME
  EXPENSE
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  name        String
  surname     String
  password    String
  role        Role          @default(USER)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Wallet      Wallet[]
  Category    Category[]
  Transaction Transaction[]
}

model Wallet {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String        @map("user_id") @db.ObjectId
  user        User          @relation(fields: [user_id], references: [id])
  balance     Float         @default(0)
  description String?
  name        String
  color       String
  currency    String
  is_primary  Boolean       @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Transaction Transaction[]
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  type        CategoryType
  built_in    Boolean       @default(false)
  user_id     String?       @map("user_id") @db.ObjectId
  user        User?         @relation(fields: [user_id], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Transaction Transaction[]
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  wallet_id   String   @map("wallet_id") @db.ObjectId
  wallet      Wallet   @relation(fields: [wallet_id], references: [id])
  category_id String   @map("category_id") @db.ObjectId
  category    Category @relation(fields: [category_id], references: [id])
  user_id     String   @map("user_id") @db.ObjectId
  user        User     @relation(fields: [user_id], references: [id])
  amount      Float
  description String?
  date        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
